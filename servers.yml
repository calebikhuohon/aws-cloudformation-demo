Description: >
  Caleb / Udacity

Parameters:    
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  
  KeyPairName:
    Description:  Name of key-pair file (PEM) for SSH login .
    Type: String
    Default: 'udacity'

Resources:

# Security Groups Specific to Resources
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        # Opening an SSH port to use it to conect a linux server to
        # be able to torubleshoot, manage or install software
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  BastionSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security group for bastion/jump-box
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Security Group

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash 
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html
      ImageId: ami-005bdb005fb00e791
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
      ImageId: ami-003634241a8fcdec0
      KeyName: udacity
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        WaitOnResourceSignals: "false"
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions

  # Load-Balancer public side outside world
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    # It references the port 8080 as an HTTP request
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      # Sends traffic to the target group and needs a path to listen
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # Property of Auto-Scalling Group 
      # Port 8080 instances of autoscaling-group
      # Checks HTTP response on path "/" if everything is fine LB is
      # going to start passing user request into the machine if the rsponse 
      # is unhealthy the respnd is eliminated by auto-scalling and respond a new one
      # If LB retrieves 5 yimes <nd dont get code 200 its unhealthy
      # That happens in a interval of 1o seconds
      # Timeout 8 seconds, we send request and we dont get yes or no, 8 seconds will be consider unhealthy
      # Halthy if you get 2 valid responses separate by 10 seconds it will be consider healthy
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  
  BastionEC2Instance1:
    Type: AWS::EC2::Instance
    DependsOn:
    - BastionSecurityGroup
    Properties:
      ImageId: ami-07b4f3c02c7f83d59
      InstanceType: t3.small
      KeyName: !Sub ${KeyPairName}
      SecurityGroupIds:
      - Ref: BastionSecurityGroup
      SubnetId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-PUB1-SN"
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 1
  
  BastionEC2Instance2:
    Type: AWS::EC2::Instance
    DependsOn:
    - BastionSecurityGroup
    Properties:
      ImageId: ami-07b4f3c02c7f83d59
      InstanceType: t3.small
      KeyName: !Sub ${KeyPairName}
      SecurityGroupIds:
      - Ref: BastionSecurityGroup
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-PUB2-SN"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 2
 